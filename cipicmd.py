#!/usr/bin/env python
# License:
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Jochen Bartl <jochenbartl@mailbox.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import sys
import json
import base64
import urllib
import httplib
from argparse import ArgumentParser


__VERSION__="0.1"


class CiPiConnection(object):
    def __init__(self, host, username, password, port=443):
        self.host = host
        self.username = username
        self.password = password
        self.port = port

    def _httpconn_get_request(self, url, parameters, fmt='json'):
        auth = base64.encodestring('%s:%s' % (self.username, self.password)).replace('\n', '')
        headers = {'Authorization': "Basic %s" % auth, 'Accept': 'application/json'}
        parametersencoded = urllib.urlencode(parameters)

        self._httpconn = httplib.HTTPSConnection(self.host)
        uri = "{}.{}?{}".format(url, fmt, parametersencoded)
        self._httpconn.request('GET', uri, headers=headers)
        response = self._httpconn.getresponse()
        data = response.read()
        jsondata = json.loads(data)

        self._httpconn.close()

        return jsondata

    def get_devices(self, fulldetails=True, maxresults=1000):
        """
        fulldetails - Retrieve detailed device information

        TODO There will be a possibility to add filters to the Prime http requiest in the future.
             For now it will request the full device table all the time!!!

        Returns JSON data received from Prime
        """

        parameters = {}

        if fulldetails:
            parameters['.full'] = 'true'

        parameters['.maxResults'] = str(maxresults)

        jsondata = conn._httpconn_get_request('/webacs/api/v1/data/Devices', parameters)

        return jsondata



class CiPiDevices(object):
    def __init__(self, jsondata):
        self.jsondata = jsondata

    def filter_by_attributes(self, attributes):
        """
        Filters JSON data from Prime and returns a list of dictionaries.

        Example: [{'deviceName': 'rtr1.example.com', 'ipAddress': '192.0.2.1'}]

        attributes -- List of attribute values to return

        TODO Just return everything unfiltered if attributes is empty?

        """
        # jsondata['queryResponse']['entity'][PYTHONLIST['devicesDTO']['ipAddress']

        devicesdata = []

        for e in self.jsondata['queryResponse']['entity']:
            devicedata = {}

            for attribute in attributes:
                try:
                    devicedata[attribute] = e['devicesDTO'][attribute]
                except KeyError:
                    # productFamily: Third Party Device, doesn't have all fields!!
                    # Check keys in json data first
                    # FIXME Inserting an empty field for now
                    devicedata[attribute] = ''

            devicesdata.append(devicedata)

        return devicesdata

    def output_csv(self, data, fields, header=True):
        """
        data - Dictonary generated by one of the parse_ functions
        fields - List of columns/attributes to print
        header - Print a header which contains the field names

        TODO Build fields automatically if None

        """

        headerstr = ""
        strformat = ""

        for field in fields:
            strformat += "{" + field + "},"
            headerstr += field + ","

        strformat = strformat[0:-1]
        headerstr = headerstr[0:-1]

        if header:
            print(headerstr)

        for e in data:
            print(strformat.format(**e))


if __name__ == '__main__':
    argparser = ArgumentParser(description='Cisco Prime Infrastructure cli tool')
    argparser.add_argument('--host', dest='host', help='Prime host')
    argparser.add_argument('--device-attributes', dest='attributes', help='Specify which Device attributes to display. Separated by comma')
    argparser.add_argument('--username', dest='username')
    argparser.add_argument('--password', dest='password')
    argparser.add_argument('--dump', dest='dumpjson', action='store_true', default=False, help='Connect to Prime and return data as JSON dump')
    argparser.add_argument('--input', dest='inputjson', help='Read JSON data from a file instead of connection to a Prime server')
    argparser.add_argument('--no-csv-header', dest='nocsvheader', action='store_true', help='Suppress CSV header ')

    args = argparser.parse_args()

    if args.inputjson:
        inputfile = args.inputjson
        with open(inputfile, 'r') as f:
            jsondata = json.load(f)
    else:
        # No input file specified. Let's connect to Prime
        conn = CiPiConnection(args.host, args.username, args.password)
        jsondata = conn.get_devices()

    if args.dumpjson:
        print(json.dumps(jsondata))
        sys.exit(0)

    devices = CiPiDevices(jsondata)

    attrs = [attr for attr in args.attributes.split(',')]

    data = devices.filter_by_attributes(attrs)

    if args.nocsvheader:
        devices.output_csv(data, attrs, header=False)
    else:
        devices.output_csv(data, attrs)

    # TODO Return helath status by default if no parameters except host, user, pass are specified

    sys.exit(0)
